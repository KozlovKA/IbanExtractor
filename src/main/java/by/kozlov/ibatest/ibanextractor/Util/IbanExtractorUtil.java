package by.kozlov.ibatest.ibanextractor.Util;

import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Component
public class IbanExtractorUtil {

    private static final String IBAN_REGEX = "AL[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){2}([a-zA-Z0-9]{4}\\s?){4}\\s?|" +
            "AD[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){2}([a-zA-Z0-9]{4}\\s?){3}\\s?|" +
            "AT[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){4}\\s?|" +
            "AZ[a-zA-Z0-9]{2}\\s?([a-zA-Z0-9]{4}\\s?)([0-9]{4}\\s?){5}\\s?|" +
            "BH[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([a-zA-Z0-9]{4}\\s?){3}([a-zA-Z0-9]{2})\\s?|" +
            "BY[a-zA-Z0-9]{2}\\s?([a-zA-Z0-9]{4}\\s?)([0-9]{4}\\s?){5}\\s?|" +
            "BE[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){3}\\s?|" +
            "BA[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){4}\\s?|" +
            "BR[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){5}([0-9]{3})([a-zA-Z]\\s?)([a-zA-Z0-9])\\s?|" +
            "BG[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([0-9]{4}\\s?)([0-9]{2})([a-zA-Z0-9]{2}\\s?)([a-zA-Z0-9]{4}\\s?)([a-zA-Z0-9]{2})\\s?|" +
            "CR[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){4}([0-9]{2})\\s?|" +
            "HR[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){4}([0-9])\\s?|" +
            "CY[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){2}([a-zA-Z0-9]{4}\\s?){4}\\s?|" +
            "CZ[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){5}\\s?|" +
            "DK[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){3}([0-9]{2})\\s?|" +
            "DO[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([0-9]{4}\\s?){5}\\s?|" +
            "TL[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){4}([0-9]{3})\\s?|" +
            "EE[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){4}\\s?|" +
            "FO[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){3}([0-9]{2})\\s?|" +
            "FI[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){3}([0-9]{2})\\s?|" +
            "FR[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){2}([0-9]{2})([a-zA-Z0-9]{2}\\s?)([a-zA-Z0-9]{4}\\s?){2}([a-zA-Z0-9])([0-9]{2})\\s?|" +
            "GE[a-zA-Z0-9]{2}\\s?([a-zA-Z0-9]{2})([0-9]{2}\\s?)([0-9]{4}\\s?){3}([0-9]{2})\\s?|" +
            "DE[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){4}([0-9]{2})\\s?|" +
            "GI[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([a-zA-Z0-9]{4}\\s?){3}([a-zA-Z0-9]{3})\\s?|" +
            "GR[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?)([0-9]{3})([a-zA-Z0-9]\\s?)([a-zA-Z0-9]{4}\\s?){3}([a-zA-Z0-9]{3})\\s?|" +
            "GL[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){3}([0-9]{2})\\s?|" +
            "GT[a-zA-Z0-9]{2}\\s?([a-zA-Z0-9]{4}\\s?)([a-zA-Z0-9]{4}\\s?){5}\\s?|" +
            "HU[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){6}\\s?|" +
            "IS[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){5}([0-9]{2})\\s?|" +
            "IE[a-zA-Z0-9]{2}\\s?([a-zA-Z0-9]{4}\\s?)([0-9]{4}\\s?){3}([0-9]{2})\\s?|" +
            "IL[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){4}([0-9]{3})\\s?|" +
            "IT[a-zA-Z0-9]{2}\\s?([a-zA-Z])([0-9]{3}\\s?)([0-9]{4}\\s?)([0-9]{3})([a-zA-Z0-9]\\s?)([a-zA-Z0-9]{4}\\s?){2}([a-zA-Z0-9]{3})\\s?|" +
            "JO[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([0-9]{4}\\s?){5}([0-9]{2})\\s?|" +
            "KZ[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){3}([0-9])([a-zA-Z0-9]{3}\\s?)([a-zA-Z0-9]{4}\\s?){2}([a-zA-Z0-9]{2})\\s?|" +
            "XK[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?)([0-9]{4}\\s?){2}([0-9]{2})([0-9]{2}\\s?)\\s?|" +
            "KW[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([a-zA-Z0-9]{4}\\s?){5}([a-zA-Z0-9]{2})\\s?|" +
            "LV[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([a-zA-Z0-9]{4}\\s?){3}([a-zA-Z0-9])\\s?|" +
            "LB[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?)([a-zA-Z0-9]{4}\\s?){5}\\s?|" +
            "LI[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?)([0-9])([a-zA-Z0-9]{3}\\s?)([a-zA-Z0-9]{4}\\s?){2}([a-zA-Z0-9])\\s?|" +
            "LT[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){4}\\s?|" +
            "LU[a-zA-Z0-9]{2}\\s?([0-9]{3})([a-zA-Z0-9]\\s?)([a-zA-Z0-9]{4}\\s?){3}\\s?|" +
            "MK[a-zA-Z0-9]{2}\\s?([0-9]{3})([a-zA-Z0-9]\\s?)([a-zA-Z0-9]{4}\\s?){2}([a-zA-Z0-9])([0-9]{2})\\s?|" +
            "MT[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([0-9]{4}\\s?)([0-9])([a-zA-Z0-9]{3}\\s?)([a-zA-Z0-9]{4}\\s?){3}([a-zA-Z0-9]{3})\\s?|" +
            "MR[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){5}([0-9]{3})\\s?|" +
            "MU[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([0-9]{4}\\s?){4}([0-9]{3})([a-zA-Z]\\s?)([a-zA-Z]{2})\\s?|" +
            "MC[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){2}([0-9]{2})([a-zA-Z0-9]{2}\\s?)([a-zA-Z0-9]{4}\\s?){2}([a-zA-Z0-9])([0-9]{2})\\s?|" +
            "MD[a-zA-Z0-9]{2}\\s?([a-zA-Z0-9]{2})([a-zA-Z0-9]{2}\\s?)([a-zA-Z0-9]{4}\\s?){4}\\s?|" +
            "ME[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){4}([0-9]{2})\\s?|" +
            "NL[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([0-9]{4}\\s?){2}([0-9]{2})\\s?|" +
            "NO[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){2}([0-9]{3})\\s?|" +
            "PK[a-zA-Z0-9]{2}\\s?([a-zA-Z0-9]{4}\\s?)([0-9]{4}\\s?){4}\\s?|" +
            "PS[a-zA-Z0-9]{2}\\s?([a-zA-Z0-9]{4}\\s?)([0-9]{4}\\s?){5}([0-9])\\s?|" +
            "PL[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){6}\\s?|" +
            "PT[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){5}([0-9])\\s?|" +
            "QA[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([a-zA-Z0-9]{4}\\s?){5}([a-zA-Z0-9])\\s?|" +
            "RO[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([a-zA-Z0-9]{4}\\s?){4}\\s?|" +
            "SM[a-zA-Z0-9]{2}\\s?([a-zA-Z])([0-9]{3}\\s?)([0-9]{4}\\s?)([0-9]{3})([a-zA-Z0-9]\\s?)([a-zA-Z0-9]{4}\\s?){2}([a-zA-Z0-9]{3})\\s?|" +
            "SA[a-zA-Z0-9]{2}\\s?([0-9]{2})([a-zA-Z0-9]{2}\\s?)([a-zA-Z0-9]{4}\\s?){4}\\s?|" +
            "RS[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){4}([0-9]{2})\\s?|" +
            "SK[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){5}\\s?|" +
            "SI[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){3}([0-9]{3})\\s?|" +
            "ES[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){5}\\s?|" +
            "SE[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){5}\\s?|" +
            "CH[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?)([0-9])([a-zA-Z0-9]{3}\\s?)([a-zA-Z0-9]{4}\\s?){2}([a-zA-Z0-9])\\s?|" +
            "TN[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?){5}\\s?|" +
            "TR[a-zA-Z0-9]{2}\\s?([0-9]{4}\\s?)([0-9])([a-zA-Z0-9]{3}\\s?)([a-zA-Z0-9]{4}\\s?){3}([a-zA-Z0-9]{2})\\s?|" +
            "AE[a-zA-Z0-9]{2}\\s?([0-9]{3})([0-9]\\s?)([0-9]{4}\\s?){3}([0-9]{3})\\s?|" +
            "GB[a-zA-Z0-9]{2}\\s?([a-zA-Z]{4}\\s?)([0-9]{4}\\s?){3}([0-9]{2})\\s?|" +
            "VA[a-zA-Z0-9]{2}\\s?([0-9]{3})([0-9]\\s?)([0-9]{4}\\s?){3}([0-9]{2})\\s?|" +
            "VG[a-zA-Z0-9]{2}\\s?([a-zA-Z0-9]{4}\\s?)([0-9]{4}\\s?){4}\\s?";

    public static List<String> extract(String text) {

        if (text == null) {
            return null;
        }
        text = text.replaceAll("\\p{Punct}|\\s|\\n|\\t", "").toUpperCase();

        List<String> ibanList = new ArrayList<>();
        Pattern ibanPattern = Pattern.compile(IBAN_REGEX, Pattern.MULTILINE);
        Matcher ibanMatcher = ibanPattern.matcher(text);
        while (ibanMatcher.find()) {
            ibanList.add(ibanMatcher.group());
        }
        return ibanList;
    }
}